<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\DTU-200_Debug.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\DTU-200_Debug.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Sep 18 14:34:46 2018
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Task_ProDeal &rArr; GPRSDataDeal &rArr; ServerCmdDeal &rArr; ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
 <LI><a href="#[2b]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel6_IRQHandler</a> from gc65_bsp.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">RS4850_ChgToRcv</a> from app_vfd.o(i.RS4850_ChgToRcv) referenced 2 times from app_vfd.o(.data)
 <LI><a href="#[9]">RS4850_ChgToSnd</a> from app_vfd.o(i.RS4850_ChgToSnd) referenced 2 times from app_vfd.o(.data)
 <LI><a href="#[c]">RS4851_ChgToRcv</a> from app_vfd.o(i.RS4851_ChgToRcv) referenced 2 times from app_vfd.o(.data)
 <LI><a href="#[b]">RS4851_ChgToSnd</a> from app_vfd.o(i.RS4851_ChgToSnd) referenced 2 times from app_vfd.o(.data)
 <LI><a href="#[e]">RS4852_ChgToRcv</a> from app_vfd.o(i.RS4852_ChgToRcv) referenced 2 times from app_vfd.o(.data)
 <LI><a href="#[d]">RS4852_ChgToSnd</a> from app_vfd.o(i.RS4852_ChgToSnd) referenced 2 times from app_vfd.o(.data)
 <LI><a href="#[42]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1b]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">UART4_IRQHandler</a> from stm32f10x_it.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[59]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[57]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[58]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[243]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[244]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[245]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[246]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[247]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5f]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[a0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[61]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[63]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[65]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[66]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[248]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[249]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[67]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[69]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6a]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[6d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6f]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[71]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[72]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[73]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[75]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[24a]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[77]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[79]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[7b]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[7d]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[24b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[89]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[24c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[24d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[81]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[24f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[250]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[251]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[83]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[252]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[253]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[254]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[255]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[256]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[257]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[258]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[259]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[25a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[25b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[25c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[25d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[25f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[260]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[261]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[262]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[263]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[264]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[265]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[266]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[5d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[267]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[86]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[268]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Task_ProDeal &rArr; GPRSDataDeal &rArr; ServerCmdDeal &rArr; ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[269]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ca]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[26a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[91]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeCreate
</UL>

<P><STRONG><a name="[94]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
</UL>

<P><STRONG><a name="[96]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_StringValToObject
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_FlowDataToObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_EventWithInfToObject
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_EventNoInfToObject
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrStringDataToObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSetAPN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdCnntSvr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[98]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[99]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[97]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[68]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[9d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6e]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[76]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[62]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[9e]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[a1]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeSizeInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeServerInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[a4]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadQeng
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeUsrInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeServerInit
</UL>

<P><STRONG><a name="[13a]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
</UL>

<P><STRONG><a name="[d3]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrListExtract
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaDefault
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdCnntSvr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeUsrInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeServerInit
</UL>

<P><STRONG><a name="[d7]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_StringValToObject
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_IsObjectBegin
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_FlowDataToObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_EventWithInfToObject
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_EventNoInfToObject
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ArrayExtract
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrStringDataToObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProDeal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdSet
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSend
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeUsrInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeServerInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTimeSet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdateData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[d8]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ArrayExtract
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485CfgResp
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterDeal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYDevDataDeal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecAddrRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaDefault
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaRead
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeDataWrite
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeDataRead
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuConfigResp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdateData
</UL>

<P><STRONG><a name="[a6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[26c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmEventInit
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultFunInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmEventInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaDefault
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckPacket
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[aa]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[a9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdCtrlInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusAddrInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[ac]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[dd]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[26f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[270]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[af]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[80]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[b1]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[9a]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9b]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[9c]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[60]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[274]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[58]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[78]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[7a]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[bd]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[70]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[bf]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[74]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[a3]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[a5]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[279]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[82]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ae]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b8]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bb]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c4]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[7c]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[7e]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[c1]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b4]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[b0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c3]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[c2]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[27a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[8c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c7]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c6]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[90]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cb]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[cc]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[b5]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[cd]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[cf]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d0]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[b6]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1db]"></a>ASCIIToHex</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, comm.o(i.ASCIIToHex))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
</UL>

<P><STRONG><a name="[d5]"></a>ATCmdParse</STRONG> (Thumb, 2998 bytes, Stack size 48 bytes, gc65.o(i.ATCmdParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ATCmdParse &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadQeng
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReAPN
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATstrToInt32U
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeFlagSet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimerErrCode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadNetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProDeal
</UL>

<P><STRONG><a name="[e3]"></a>ATCmdSetAPN</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, gc65.o(i.ATCmdSetAPN))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ATCmdSetAPN &rArr; ATCmdSend &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[d9]"></a>ATstrToInt32U</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gc65.o(i.ATstrToInt32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ATstrToInt32U
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadQeng
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[e4]"></a>AckPacket</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, app_protocol.o(i.AckPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AckPacket &rArr; GB_GetAckMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordToBuf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GetAckMsgHead
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
</UL>

<P><STRONG><a name="[22f]"></a>AlarmEventDeal</STRONG> (Thumb, 594 bytes, Stack size 12 bytes, app_alarmevent.o(i.AlarmEventDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AlarmEventDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>AlarmEventInit</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, app_alarmevent.o(i.AlarmEventInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = AlarmEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>AlarmFilterTimer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_alarmevent.o(i.AlarmFilterTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AlarmFilterTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmFilterTimeOver
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>Alarm_Filter_Deal</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, app_alarmevent.o(i.Alarm_Filter_Deal))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MultFun_1s
</UL>

<P><STRONG><a name="[1d8]"></a>AppDebugInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_debug.o(i.AppDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareInit
</UL>

<P><STRONG><a name="[22c]"></a>BigEndConvert</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, app_dtucfg.o(i.BigEndConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BigEndConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
</UL>

<P><STRONG><a name="[1cf]"></a>BufExchange</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(i.BufExchange))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
</UL>

<P><STRONG><a name="[f0]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
</UL>

<P><STRONG><a name="[f1]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
</UL>

<P><STRONG><a name="[ef]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f10x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
</UL>

<P><STRONG><a name="[20f]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_MessagePending))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
</UL>

<P><STRONG><a name="[111]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveCan_sendData
</UL>

<P><STRONG><a name="[109]"></a>CRC16_1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comm.o(i.CRC16_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWriteRegPacket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWriteMoreRegPacket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdReadRegPacket
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvCrcChk
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaWrite
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaRead
</UL>

<P><STRONG><a name="[216]"></a>CRC32Calc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, crc32.o(i.CRC32Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC32Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileCrcCheck
</UL>

<P><STRONG><a name="[215]"></a>CRC32CalcReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, crc32.o(i.CRC32CalcReset))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileCrcCheck
</UL>

<P><STRONG><a name="[211]"></a>CanBus_ISR_Rx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_vfd.o(i.CanBus_ISR_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>Can_Config</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, bsp.o(i.Can_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Can_Config &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[234]"></a>CharConvert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comm.o(i.CharConvert))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
</UL>

<P><STRONG><a name="[19e]"></a>ChgVfdAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_vfd.o(i.ChgVfdAddr))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[f2]"></a>ClearHeartTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_protocol.o(i.ClearHeartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearHeartTimer &rArr; SysTime_Fresh
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Fresh
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
</UL>

<P><STRONG><a name="[f4]"></a>ConverseTimeNum</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_rtc.o(i.ConverseTimeNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ConverseTimeNum &rArr; YearDay &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YearDay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTimeSet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadNetTime
</UL>

<P><STRONG><a name="[29]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gc65_bsp.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUART_SetDMAReceive
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUART_SetDMAReceive
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDMAReceiveDisable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
</UL>

<P><STRONG><a name="[f7]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
</UL>

<P><STRONG><a name="[140]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
</UL>

<P><STRONG><a name="[135]"></a>DWordToBuf</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(i.DWordToBuf))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdateData
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GetMsgHead
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GetAckMsgHead
</UL>

<P><STRONG><a name="[101]"></a>DebugFtpTest</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_usrcmd.o(i.DebugFtpTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DebugFtpTest &rArr; FtpInfoInit &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdCtrl
</UL>

<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>DebugMsg</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, app_debug.o(i.DebugMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaStorage
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaRead
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdQuery
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashWrite
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaDefault
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeSectorErase
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileWrite
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileGet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileCrcCheck
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_data_process
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
</UL>

<P><STRONG><a name="[103]"></a>DebugStrMsg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_debug.o(i.DebugStrMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DebugStrMsg &rArr; DebugWithLen &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugWithLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
</UL>

<P><STRONG><a name="[1c7]"></a>DelayReConnect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gc65.o(i.DelayReConnect))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1ce]"></a>DevFourByteToDWord</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(i.DevFourByteToDWord))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[1c5]"></a>DevFourByteToU16</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, comm.o(i.DevFourByteToU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevFourByteToU16
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[105]"></a>DevParaDefault</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, app_para.o(i.DevParaDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DevParaDefault &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaRead
</UL>

<P><STRONG><a name="[10a]"></a>DevParaWrite</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, app_para.o(i.DevParaWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DevParaWrite &rArr; _flashWrite &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashWrite
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaStorage
</UL>

<P><STRONG><a name="[10d]"></a>DevStatToSystem</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, app_protocol.o(i.DevStatToSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DevStatToSystem &rArr; GetMultLoc &rArr; StringToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultLoc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>DevTwoByteToWord</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comm.o(i.DevTwoByteToWord))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[110]"></a>DriveCan_sendData</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_vfd.o(i.DriveCan_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DriveCan_sendData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
</UL>

<P><STRONG><a name="[226]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashWrite
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashErase
</UL>

<P><STRONG><a name="[112]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashErase
</UL>

<P><STRONG><a name="[115]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[227]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashWrite
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashErase
</UL>

<P><STRONG><a name="[114]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashWrite
</UL>

<P><STRONG><a name="[225]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashWrite
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashErase
</UL>

<P><STRONG><a name="[113]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[12e]"></a>FTPConnectRequestSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_upgrade.o(i.FTPConnectRequestSet))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[fe]"></a>FeedDog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.FeedDog))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugWithLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeSectorErase
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileCrcCheck
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
</UL>

<P><STRONG><a name="[1d3]"></a>FieldValOffset</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_para.o(i.FieldValOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FieldValOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
</UL>

<P><STRONG><a name="[116]"></a>FlashBufferRead</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spiflashdev.o(i.FlashBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashBufferRead &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashRead
</UL>

<P><STRONG><a name="[119]"></a>FlashBufferWrite</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, spiflashdev.o(i.FlashBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashBufferWrite &rArr; FlashWait_Busy_AAI &rArr; FlashReadStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteDisable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWait_Busy_AAI
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWaitForWriteEnd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWrite
</UL>

<P><STRONG><a name="[11e]"></a>FlashHalInit</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, spiflashhal.o(i.FlashHalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FlashHalInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
</UL>

<P><STRONG><a name="[1b9]"></a>FlashLockCreate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spiflashusr.o(i.FlashLockCreate))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
</UL>

<P><STRONG><a name="[125]"></a>FlashLockPend</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spiflashusr.o(i.FlashLockPend))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWrite
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashRead
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashErase4K
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashModelRead
</UL>

<P><STRONG><a name="[127]"></a>FlashLockPost</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spiflashusr.o(i.FlashLockPost))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWrite
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashRead
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashErase4K
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashModelRead
</UL>

<P><STRONG><a name="[126]"></a>FlashReadID</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashReadID &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashModelRead
</UL>

<P><STRONG><a name="[118]"></a>FlashSPISend</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spiflashhal.o(i.FlashSPISend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashSPISend
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteDisable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWaitForWriteEnd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_WriteStatusRegister
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_EnableWriteStatusRegister
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_DBSY
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase_4KByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadID
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferRead
</UL>

<P><STRONG><a name="[12c]"></a>FlashSectorErase_4KByte</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashSectorErase_4KByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashSectorErase_4KByte &rArr; FlashWriteEnable &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteDisable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWaitForWriteEnd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashErase4K
</UL>

<P><STRONG><a name="[117]"></a>FlashSelect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spiflashhal.o(i.FlashSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteEnable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteDisable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWaitForWriteEnd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_WriteStatusRegister
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_EnableWriteStatusRegister
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_DBSY
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase_4KByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadID
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferRead
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>

<P><STRONG><a name="[21d]"></a>FtpDataGetFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_upgrade.o(i.FtpDataGetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[102]"></a>FtpInfoInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, app_upgrade.o(i.FtpInfoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FtpInfoInit &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTPConnectRequestSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugFtpTest
</UL>

<P><STRONG><a name="[218]"></a>FtpTimeDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_upgrade.o(i.FtpTimeDelay))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileGet
</UL>

<P><STRONG><a name="[12f]"></a>GB_GeneralAck</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, app_protocol.o(i.GB_GeneralAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GB_GeneralAck &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataPost
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckPacket
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[e6]"></a>GB_GetAckMsgHead</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, app_protocol.o(i.GB_GetAckMsgHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GB_GetAckMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWordToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckPacket
</UL>

<P><STRONG><a name="[136]"></a>GB_GetMsgHead</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, app_protocol.o(i.GB_GetMsgHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GB_GetMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWordToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet
</UL>

<P><STRONG><a name="[1e8]"></a>GC65Timer</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gc65.o(i.GC65Timer))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[137]"></a>GPIO_Configuration</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, bsp.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[121]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCan
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init485Uart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>

<P><STRONG><a name="[120]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>

<P><STRONG><a name="[100]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Indicate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugWithLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysComLed
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatToSystem
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4852_ChgToRcv
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4851_ChgToRcv
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4850_ChgToRcv
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDMAReceiveDisable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartDMAReceive
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
</UL>

<P><STRONG><a name="[f8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Indicate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugWithLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysComLed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComLed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatToSystem
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4852_ChgToSnd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4851_ChgToSnd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4850_ChgToSnd
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeFlagSet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
</UL>

<P><STRONG><a name="[138]"></a>GPRSDataDeal</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, app_protocol.o(i.GPRSDataDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = GPRSDataDeal &rArr; ServerCmdDeal &rArr; ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetTwoByteToWord
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetFourByteToDWord
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProDeal
</UL>

<P><STRONG><a name="[13d]"></a>GPRSUartDMAInit</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, gc65_bsp.o(i.GPRSUartDMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GPRSUartDMAInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAppInit
</UL>

<P><STRONG><a name="[1b0]"></a>GetAckVaule</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_protocol.o(i.GetAckVaule))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
</UL>

<P><STRONG><a name="[144]"></a>GetEventInfo</STRONG> (Thumb, 4380 bytes, Stack size 144 bytes, app_protocol.o(i.GetEventInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GetEventInfo &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_EventWithInfToObject
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_EventNoInfToObject
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[21a]"></a>GetGprsUartDMABuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gc65_bsp.o(i.GetGprsUartDMABuf))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileWrite
</UL>

<P><STRONG><a name="[14a]"></a>GetHeartData</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, app_protocol.o(i.GetHeartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GetHeartData &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[1ec]"></a>GetMeter2ReadAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_plt.o(i.GetMeter2ReadAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
</UL>

<P><STRONG><a name="[1f6]"></a>GetMeterReadAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_plt.o(i.GetMeterReadAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
</UL>

<P><STRONG><a name="[10f]"></a>GetMultLoc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, gc65.o(i.GetMultLoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetMultLoc &rArr; StringToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatToSystem
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecAddrRead
</UL>

<P><STRONG><a name="[14c]"></a>GetPlt1SpecPara</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, app_plt.o(i.GetPlt1SpecPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GetPlt1SpecPara &rArr; JSON_AddrAndDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[14e]"></a>GetPlt2SpecPara</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, app_plt.o(i.GetPlt2SpecPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GetPlt2SpecPara &rArr; JSON_AddrAndDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[14f]"></a>GetPlt3SpecPara</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, app_plt.o(i.GetPlt3SpecPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GetPlt3SpecPara &rArr; JSON_AddrAndDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[150]"></a>GetPltAllPara</STRONG> (Thumb, 654 bytes, Stack size 32 bytes, app_plt.o(i.GetPltAllPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = GetPltAllPara &rArr; JSON_AddrAndDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrStringDataToObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevTwoByteToWord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecAddrRead
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[19c]"></a>GetPltReadAddr</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, app_plt.o(i.GetPltReadAddr))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[155]"></a>GetRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app_protocol.o(i.GetRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GetRegister &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[1ae]"></a>GetRsp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_protocol.o(i.GetRsp))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
</UL>

<P><STRONG><a name="[156]"></a>GetRtctime</STRONG> (Thumb, 272 bytes, Stack size 44 bytes, app_rtc.o(i.GetRtctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetRtctime &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
</UL>

<P><STRONG><a name="[158]"></a>GetUpdateData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_protocol.o(i.GetUpdateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetUpdateData &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordToBuf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWordToBuf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[159]"></a>GetVfdOptInfo</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, app_protocol.o(i.GetVfdOptInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GetVfdOptInfo &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[15a]"></a>GprsAppInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gc65.o(i.GprsAppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GprsAppInit &rArr; pipeCreate &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeCreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>GprsDMAReceiveDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gc65_bsp.o(i.GprsDMAReceiveDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GprsDMAReceiveDisable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[15c]"></a>GprsParaInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gc65.o(i.GprsParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAppInit
</UL>

<P><STRONG><a name="[da]"></a>GprsReAPN</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gc65.o(i.GprsReAPN))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[1e7]"></a>GprsReConnect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gc65.o(i.GprsReConnect))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[de]"></a>GprsReadNetTime</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, app_rtc.o(i.GprsReadNetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GprsReadNetTime &rArr; ConverseTimeNum &rArr; YearDay &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GmtToBjTime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverseTimeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[df]"></a>GprsReadQeng</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, gc65.o(i.GprsReadQeng))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GprsReadQeng &rArr; strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATstrToInt32U
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[160]"></a>GprsSndDataAccept</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gc65.o(i.GprsSndDataAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GprsSndDataAccept &rArr; pipeDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeDataRead
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
</UL>

<P><STRONG><a name="[162]"></a>GprsSndDataFlush</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gc65.o(i.GprsSndDataFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GprsSndDataFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[134]"></a>GprsSndDataPost</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gc65.o(i.GprsSndDataPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GprsSndDataPost &rArr; pipeDataWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeDataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
</UL>

<P><STRONG><a name="[165]"></a>GprsUART_SetDMAReceive</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gc65_bsp.o(i.GprsUART_SetDMAReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GprsUART_SetDMAReceive &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartDMAReceive
</UL>

<P><STRONG><a name="[e2]"></a>GprsUartCmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gc65_bsp.o(i.GprsUartCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GprsUartCmd &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDATA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSend
</UL>

<P><STRONG><a name="[166]"></a>GprsUartDMAReceive</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gc65_bsp.o(i.GprsUartDMAReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GprsUartDMAReceive &rArr; GprsUART_SetDMAReceive &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUART_SetDMAReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileGet
</UL>

<P><STRONG><a name="[167]"></a>GprsUartIsr</STRONG> (Thumb, 892 bytes, Stack size 8 bytes, gc65.o(i.GprsUartIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GprsUartIsr &rArr; pipeDataWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeDataWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveBlackatoi
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>HardWareInit</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, bsp.o(i.HardWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HardWareInit &rArr; InitUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitIWDG
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCan
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>HaveDataSend</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, gc65.o(i.HaveDataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HaveDataSend &rArr; GprsSndDataAccept &rArr; pipeDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnSet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeDataValid
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHeartTimer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendATCondition
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsertTo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[182]"></a>Hex2Float</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comm.o(i.Hex2Float))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_FlowDataToObject
</UL>

<P><STRONG><a name="[176]"></a>Init485Uart</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, bsp.o(i.Init485Uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Init485Uart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
</UL>

<P><STRONG><a name="[16e]"></a>InitCan</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp.o(i.InitCan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitCan &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[16c]"></a>InitIWDG</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.InitIWDG))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[16d]"></a>InitUart</STRONG> (Thumb, 544 bytes, Stack size 80 bytes, bsp.o(i.InitUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = InitUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[173]"></a>InsertTo</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gc65.o(i.InsertTo))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
</UL>

<P><STRONG><a name="[16f]"></a>InterruptConfig</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, bsp.o(i.InterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InterruptConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[dc]"></a>IsIp</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, comm.o(i.IsIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsIp &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[208]"></a>IsModbusMaster</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_vfd.o(i.IsModbusMaster))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
</UL>

<P><STRONG><a name="[1d0]"></a>IsNumber</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, comm.o(i.IsNumber))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
</UL>

<P><STRONG><a name="[1de]"></a>IsReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_protocol.o(i.IsReg))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaStorage
</UL>

<P><STRONG><a name="[14d]"></a>JSON_AddrAndDataToObject</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, app_json.o(i.JSON_AddrAndDataToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = JSON_AddrAndDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt3SpecPara
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt2SpecPara
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt1SpecPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[17d]"></a>JSON_AddrListExtract</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, app_json.o(i.JSON_AddrListExtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = JSON_AddrListExtract &rArr; JSON_ArrayExtract &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ArrayExtract
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[14b]"></a>JSON_AddrNumberDataToObject</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_json.o(i.JSON_AddrNumberDataToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = JSON_AddrNumberDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt1SpecPara
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlykeyVarRead
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[152]"></a>JSON_AddrStringDataToObject</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_json.o(i.JSON_AddrStringDataToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = JSON_AddrStringDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[17e]"></a>JSON_ArrayExtract</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, app_json.o(i.JSON_ArrayExtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = JSON_ArrayExtract &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrListExtract
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[146]"></a>JSON_EventNoInfToObject</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_json.o(i.JSON_EventNoInfToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = JSON_EventNoInfToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
</UL>

<P><STRONG><a name="[145]"></a>JSON_EventWithInfToObject</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_json.o(i.JSON_EventWithInfToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = JSON_EventWithInfToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
</UL>

<P><STRONG><a name="[180]"></a>JSON_Extract</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, app_json.o(i.JSON_Extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JSON_Extract
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ExtractObjNode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[17f]"></a>JSON_ExtractObjNode</STRONG> (Thumb, 428 bytes, Stack size 36 bytes, app_json.o(i.JSON_ExtractObjNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = JSON_ExtractObjNode &rArr; JSON_Extract
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Extract
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[181]"></a>JSON_FlowDataToObject</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, app_json.o(i.JSON_FlowDataToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = JSON_FlowDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Float
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[183]"></a>JSON_IsObjectBegin</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_json.o(i.JSON_IsObjectBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JSON_IsObjectBegin &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
</UL>

<P><STRONG><a name="[184]"></a>JSON_MeterDataToObject</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, app_json.o(i.JSON_MeterDataToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[132]"></a>JSON_NumberValToObject</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_json.o(i.JSON_NumberValToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = JSON_NumberValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[130]"></a>JSON_ObjectBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_json.o(i.JSON_ObjectBegin))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[133]"></a>JSON_ObjectEnd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_json.o(i.JSON_ObjectEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JSON_ObjectEnd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[131]"></a>JSON_RtcTimeGet</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, app_protocol.o(i.JSON_RtcTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_StringValToObject
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtctime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>

<P><STRONG><a name="[186]"></a>JSON_StringValToObject</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_json.o(i.JSON_StringValToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
</UL>

<P><STRONG><a name="[f5]"></a>LeapYear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_rtc.o(i.LeapYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YearDay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GmtToBjTime
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRtctime
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverseTimeNum
</UL>

<P><STRONG><a name="[174]"></a>LedOnSet</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app_led.o(i.LedOnSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedOnSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProDeal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
</UL>

<P><STRONG><a name="[191]"></a>Led_Indicate_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_led.o(i.Led_Indicate_Init))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultFunInit
</UL>

<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1eb]"></a>Meter2ClrTimeOut</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_vfd.o(i.Meter2ClrTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
</UL>

<P><STRONG><a name="[1f5]"></a>MeterClrTimeOut</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_vfd.o(i.MeterClrTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
</UL>

<P><STRONG><a name="[1ed]"></a>MeterWaitResp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_vfd.o(i.MeterWaitResp))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
</UL>

<P><STRONG><a name="[188]"></a>ModbusAddrInit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_vfd.o(i.ModbusAddrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ModbusAddrInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485ComInit
</UL>

<P><STRONG><a name="[18c]"></a>ModbusDelay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_vfd.o(i.ModbusDelay))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
</UL>

<P><STRONG><a name="[1b5]"></a>ModbusFunInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_vfd.o(i.ModbusFunInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModbusFunInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485ComInit
</UL>

<P><STRONG><a name="[1b4]"></a>ModbusOvTmInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_vfd.o(i.ModbusOvTmInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485ComInit
</UL>

<P><STRONG><a name="[189]"></a>ModbusRcvCrcChk</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, app_vfd.o(i.ModbusRcvCrcChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ModbusRcvCrcChk &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterDeal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
</UL>

<P><STRONG><a name="[1ef]"></a>ModbusRcvFinish</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_vfd.o(i.ModbusRcvFinish))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterDeal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
</UL>

<P><STRONG><a name="[1f1]"></a>ModbusRcvTimeOut</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_vfd.o(i.ModbusRcvTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterDeal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
</UL>

<P><STRONG><a name="[18a]"></a>ModbusSendNextChar</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_vfd.o(i.ModbusSendNextChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModbusSendNextChar &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>ModbusStartSend</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_vfd.o(i.ModbusStartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModbusStartSend &rArr; UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntSendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485CfgResp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[20c]"></a>ModbusUartIsr</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_vfd.o(i.ModbusUartIsr))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>ModelIsFtping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_upgrade.o(i.ModelIsFtping))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[18e]"></a>MultFunInit</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, app_multfun.o(i.MultFunInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MultFunInit &rArr; rst_data_process &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Indicate_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_data_process
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimerInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCan
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
</UL>

<P><STRONG><a name="[179]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
</UL>

<P><STRONG><a name="[13b]"></a>NetFourByteToDWord</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(i.NetFourByteToDWord))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
</UL>

<P><STRONG><a name="[139]"></a>NetTwoByteToWord</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comm.o(i.NetTwoByteToWord))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
</UL>

<P><STRONG><a name="[194]"></a>Packet</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, app_protocol.o(i.Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet &rArr; GB_GetMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WordToBuf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GetMsgHead
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
</UL>

<P><STRONG><a name="[172]"></a>PipeDataValid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pipe.o(i.PipeDataValid))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
</UL>

<P><STRONG><a name="[1e4]"></a>Plt3SysVarRead</STRONG> (Thumb, 1600 bytes, Stack size 16 bytes, app_plt.o(i.Plt3SysVarRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Plt3SysVarRead
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
</UL>

<P><STRONG><a name="[195]"></a>PltDevDataPrase</STRONG> (Thumb, 3308 bytes, Stack size 16 bytes, app_plt.o(i.PltDevDataPrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PltDevDataPrase &rArr; my_itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_itoa
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plt_RunStata_Deal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plt_PreAlarm_Deal
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plt_Fault_Deal
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltMam6080OtherDataPrase
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
</UL>

<P><STRONG><a name="[207]"></a>PltDevMan860DataPrase</STRONG> (Thumb, 1410 bytes, Stack size 8 bytes, app_plt.o(i.PltDevMan860DataPrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PltDevMan860DataPrase
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
</UL>

<P><STRONG><a name="[19a]"></a>PltMam6080OtherDataPrase</STRONG> (Thumb, 1382 bytes, Stack size 0 bytes, app_plt.o(i.PltMam6080OtherDataPrase))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
</UL>

<P><STRONG><a name="[1e5]"></a>PltMam6080OtherVarRead</STRONG> (Thumb, 1682 bytes, Stack size 12 bytes, app_plt.o(i.PltMam6080OtherVarRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PltMam6080OtherVarRead
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
</UL>

<P><STRONG><a name="[19b]"></a>PltParaWrite</STRONG> (Thumb, 710 bytes, Stack size 24 bytes, app_vfd.o(i.PltParaWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PltParaWrite &rArr; ModbusStartSend &rArr; UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWriteRegPacket
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWaitResp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetWhoUse
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdReadRegPacket
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdClrTimeOut
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteOptResult
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComOptResultAlarm
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgVfdAddr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Writer_Data_SendBuf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
</UL>

<P><STRONG><a name="[1a6]"></a>PltSysVarWriter</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, app_plt.o(i.PltSysVarWriter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PltSysVarWriter &rArr; my_atof &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Server_Writer_Data_Buf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
</UL>

<P><STRONG><a name="[199]"></a>Plt_Fault_Deal</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, app_plt.o(i.Plt_Fault_Deal))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
</UL>

<P><STRONG><a name="[197]"></a>Plt_PreAlarm_Deal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_plt.o(i.Plt_PreAlarm_Deal))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
</UL>

<P><STRONG><a name="[198]"></a>Plt_RunStata_Deal</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, app_plt.o(i.Plt_RunStata_Deal))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
</UL>

<P><STRONG><a name="[1ac]"></a>ProDataSend</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, app_protocol.o(i.ProDataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ProDataSend &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGprsCon
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataPost
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRsp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRsp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAckVaule
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[22e]"></a>ProSendInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_protocol.o(i.ProSendInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
</UL>

<P><STRONG><a name="[16a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[eb]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[11f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>

<P><STRONG><a name="[233]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rst_data_process
</UL>

<P><STRONG><a name="[ee]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[a]"></a>RS4850_ChgToRcv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_vfd.o(i.RS4850_ChgToRcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS4850_ChgToRcv
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_vfd.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>RS4850_ChgToSnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_vfd.o(i.RS4850_ChgToSnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RS4850_ChgToSnd &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_vfd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>RS4851_ChgToRcv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_vfd.o(i.RS4851_ChgToRcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS4851_ChgToRcv
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_vfd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>RS4851_ChgToSnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, app_vfd.o(i.RS4851_ChgToSnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RS4851_ChgToSnd &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_vfd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>RS4852_ChgToRcv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_vfd.o(i.RS4852_ChgToRcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS4852_ChgToRcv
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_vfd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>RS4852_ChgToSnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_vfd.o(i.RS4852_ChgToSnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RS4852_ChgToSnd &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_vfd.o(.data)
</UL>
<P><STRONG><a name="[1b2]"></a>RS485CfgResp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_debug.o(i.RS485CfgResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RS485CfgResp &rArr; ModbusStartSend &rArr; UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
</UL>

<P><STRONG><a name="[1b3]"></a>RS485ComInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_vfd.o(i.RS485ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RS485ComInit &rArr; ModbusAddrInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOvTmInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFunInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusAddrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>RS485SndDly</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_debug.o(i.RS485SndDly))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugWithLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>RTC_GmtToBjTime</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, app_rtc.o(i.RTC_GmtToBjTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_GmtToBjTime &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReadNetTime
</UL>

<P><STRONG><a name="[205]"></a>ReadIndexChg</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app_vfd.o(i.ReadIndexChg))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
</UL>

<P><STRONG><a name="[1c6]"></a>RebootDelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_protocol.o(i.RebootDelay))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdCtrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[21e]"></a>RebootRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_upgrade.o(i.RebootRequest))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[db]"></a>RegTimerErrCode</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, app_multfun.o(i.RegTimerErrCode))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[190]"></a>RegTimerInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_multfun.o(i.RegTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultFunInit
</UL>

<P><STRONG><a name="[1fc]"></a>RegTimerRun</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_multfun.o(i.RegTimerRun))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MultFun_1s
</UL>

<P><STRONG><a name="[203]"></a>RegTimerStop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_multfun.o(i.RegTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[168]"></a>RemoveBlackatoi</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gc65.o(i.RemoveBlackatoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RemoveBlackatoi &rArr; my_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartIsr
</UL>

<P><STRONG><a name="[1e9]"></a>ReturnToInserStage</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gc65.o(i.ReturnToInserStage))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[1b6]"></a>Rs485ComLed</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_led.o(i.Rs485ComLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Rs485ComLed &rArr; Led_Indicate
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Indicate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>Rs485ComOptResultAlarm</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, app_vfd.o(i.Rs485ComOptResultAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rs485ComOptResultAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[1b8]"></a>SPIFlashErase4K</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spiflash.o(i.SPIFlashErase4K))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIFlashErase4K &rArr; FlashSectorErase_4KByte &rArr; FlashWriteEnable &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase_4KByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPend
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeSectorErase
</UL>

<P><STRONG><a name="[170]"></a>SPIFlashInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spiflash.o(i.SPIFlashInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIFlashInit &rArr; FlashHalInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_WriteStatusRegister
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_EnableWriteStatusRegister
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_DBSY
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashModelRead
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[1bd]"></a>SPIFlashRead</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spiflash.o(i.SPIFlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIFlashRead &rArr; FlashBufferRead &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferRead
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPend
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileCrcCheck
</UL>

<P><STRONG><a name="[1be]"></a>SPIFlashWrite</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spiflash.o(i.SPIFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIFlashWrite &rArr; FlashBufferWrite &rArr; FlashWait_Busy_AAI &rArr; FlashReadStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPend
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileWrite
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAppInfUpdate
</UL>

<P><STRONG><a name="[123]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>

<P><STRONG><a name="[129]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>

<P><STRONG><a name="[12b]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>

<P><STRONG><a name="[12a]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>

<P><STRONG><a name="[122]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashHalInit
</UL>

<P><STRONG><a name="[1bc]"></a>SST25V_DBSY</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spiflashdev.o(i.SST25V_DBSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SST25V_DBSY &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
</UL>

<P><STRONG><a name="[1ba]"></a>SST25V_EnableWriteStatusRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spiflashdev.o(i.SST25V_EnableWriteStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SST25V_EnableWriteStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_WriteStatusRegister
</UL>

<P><STRONG><a name="[1bb]"></a>SST25V_WriteStatusRegister</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spiflashdev.o(i.SST25V_WriteStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SST25V_WriteStatusRegister &rArr; SST25V_EnableWriteStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST25V_EnableWriteStatusRegister
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
</UL>

<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>SendATCondition</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, gc65.o(i.SendATCondition))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
</UL>

<P><STRONG><a name="[1bf]"></a>SendIPDATA</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gc65.o(i.SendIPDATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendIPDATA &rArr; GprsUartCmd &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[13c]"></a>ServerCmdDeal</STRONG> (Thumb, 1402 bytes, Stack size 64 bytes, app_protocol.o(i.ServerCmdDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ServerCmdDeal &rArr; ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ExtractObjNode
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Extract
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ArrayExtract
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrListExtract
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaStorage
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevFourByteToU16
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootDelay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayReConnect
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeUsrInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeSizeInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeServerInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTPConnectRequestSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParaSaveFlag
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GB_GeneralAck
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBindStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjRespondToServer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
</UL>

<P><STRONG><a name="[1c0]"></a>ServerCmd_Head_Deal</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_protocol.o(i.ServerCmd_Head_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ServerCmd_Head_Deal &rArr; ServerTimeSet &rArr; ConverseTimeNum &rArr; YearDay &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_IsObjectBegin
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Extract
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayReConnect
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerTimeSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1c1]"></a>ServerDataGetRespond</STRONG> (Thumb, 440 bytes, Stack size 104 bytes, app_protocol.o(i.ServerDataGetRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_FlowDataToObject
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrStringDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevFourByteToDWord
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufExchange
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevTwoByteToWord
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckPacket
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlykeyVarRead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1c2]"></a>ServerParaSet</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, app_protocol.o(i.ServerParaSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ServerParaSet &rArr; PltSysVarWriter &rArr; my_atof &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGprsCon
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumber
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vfd_Meter_Write_Data
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldValOffset
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayReConnect
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1cd]"></a>ServerTimeSet</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, app_rtc.o(i.ServerTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ServerTimeSet &rArr; ConverseTimeNum &rArr; YearDay &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverseTimeNum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
</UL>

<P><STRONG><a name="[1ab]"></a>Server_Writer_Data_Buf</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_plt.o(i.Server_Writer_Data_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Server_Writer_Data_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
</UL>

<P><STRONG><a name="[19d]"></a>Server_Writer_Data_SendBuf</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, app_plt.o(i.Server_Writer_Data_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Server_Writer_Data_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[1d4]"></a>SetMeterReadIndex</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, app_vfd.o(i.SetMeterReadIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBindStatus
</UL>

<P><STRONG><a name="[1c3]"></a>SetParaSaveFlag</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, app_protocol.o(i.SetParaSaveFlag))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1a5]"></a>SetRemoteOptResult</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_vfd.o(i.SetRemoteOptResult))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[22d]"></a>Simulation</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, simulation.o(i.Simulation))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>SoftWareInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.SoftWareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SoftWareInit &rArr; SysParaRead &rArr; DevParaDefault &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaRead
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDebugInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>SpecAddrRead</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, app_para.o(i.SpecAddrRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SpecAddrRead &rArr; GetMultLoc &rArr; StringToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultLoc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
</UL>

<P><STRONG><a name="[1fe]"></a>Start_Stop_Filter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_alarmevent.o(i.Start_Stop_Filter))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MultFun_1s
</UL>

<P><STRONG><a name="[10e]"></a>StringToHex</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, comm.o(i.StringToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StringToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCIIToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatToSystem
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpInfoInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMultLoc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeVersionInit
</UL>

<P><STRONG><a name="[1dc]"></a>SysAppInfUpdate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_upgrade.o(i.SysAppInfUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysAppInfUpdate &rArr; SPIFlashWrite &rArr; FlashBufferWrite &rArr; FlashWait_Busy_AAI &rArr; FlashReadStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[1dd]"></a>SysComLed</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, app_led.o(i.SysComLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysComLed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGprsCon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>SysParaRead</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, app_para.o(i.SysParaRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SysParaRead &rArr; DevParaDefault &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaDefault
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareInit
</UL>

<P><STRONG><a name="[1c4]"></a>SysParaStorage</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, app_para.o(i.SysParaStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SysParaStorage &rArr; DevParaWrite &rArr; _flashWrite &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; UartRcvTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Updata
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvTimeOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e1]"></a>SysTime_Delay</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, app_rtc.o(i.SysTime_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTime_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[f3]"></a>SysTime_Fresh</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, app_rtc.o(i.SysTime_Fresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTime_Fresh
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearHeartTimer
</UL>

<P><STRONG><a name="[1e2]"></a>SysTime_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_rtc.o(i.SysTime_Get))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Fresh
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Delay
</UL>

<P><STRONG><a name="[1df]"></a>SysTime_Updata</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_rtc.o(i.SysTime_Updata))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d9]"></a>SysVarInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_para.o(i.SysVarInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareInit
</UL>

<P><STRONG><a name="[151]"></a>SysVarRead</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, app_para.o(i.SysVarRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysVarRead &rArr; SpecAddrRead &rArr; GetMultLoc &rArr; StringToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYMeterVarRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltMam6080OtherVarRead
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Plt3SysVarRead
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecAddrRead
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldValOffset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[55]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1e6]"></a>TaskGC65</STRONG> (Thumb, 7826 bytes, Stack size 72 bytes, gc65.o(i.TaskGC65))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = TaskGC65 &rArr; ATCmdCnntSvr &rArr; ATCmdSend &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDMAReceiveDisable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendIPDATA
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnToInserStage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HaveDataSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReConnect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReAPN
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GC65Timer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSetAPN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdCnntSvr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimerErrCode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ea]"></a>Task_Meter2Comm</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, app_vfd.o(i.Task_Meter2Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task_Meter2Comm &rArr; ModbusStartSend &rArr; UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdReadRegPacket
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterWaitResp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter2ClrTimeOut
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgVfdAddr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeter2ReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>Task_Meter2Deal</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, app_vfd.o(i.Task_Meter2Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task_Meter2Deal &rArr; ModbusRcvCrcChk &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvTimeOut
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvFinish
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvCrcChk
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriveCan_sendData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYDevDataDeal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>Task_Meter2Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_vfd.o(i.Task_Meter2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Task_Meter2Init &rArr; InitUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOvTmInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFunInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusAddrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>Task_MeterComm</STRONG> (Thumb, 610 bytes, Stack size 32 bytes, app_vfd.o(i.Task_MeterComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Task_MeterComm &rArr; VfdWriteMoreRegPacket &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWriteMoreRegPacket
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdReadRegPacket
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComOptResultAlarm
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterWaitResp
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterClrTimeOut
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgVfdAddr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterReadIndexChg
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>Task_MeterDeal</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, app_vfd.o(i.Task_MeterDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task_MeterDeal &rArr; ModbusRcvCrcChk &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvTimeOut
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvFinish
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvCrcChk
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYDevDataDeal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f9]"></a>Task_MeterInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app_vfd.o(i.Task_MeterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Task_MeterInit &rArr; InitUart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterReadIndex
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOvTmInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFunInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusAddrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>Task_MultFun_1s</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, app_multfun.o(i.Task_MultFun_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Task_MultFun_1s &rArr; Task_VfdInit &rArr; Init485Uart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Stop_Filter
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm_Filter_Deal
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimerRun
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ff]"></a>Task_ProDeal</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_protocol.o(i.Task_ProDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Task_ProDeal &rArr; GPRSDataDeal &rArr; ServerCmdDeal &rArr; ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnSet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pipeDataRead
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSDataDeal
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>Task_ProSend</STRONG> (Thumb, 1464 bytes, Stack size 24 bytes, app_protocol.o(i.Task_ProSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Task_ProSend &rArr; GetEventInfo &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGprsCon
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltAllPara
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprsIsConnect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataFlush
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsReConnect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelIsFtping
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegTimerStop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Fresh
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTime_Delay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVfdOptInfo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdateData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegister
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusUpData
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[204]"></a>Task_VfdComm</STRONG> (Thumb, 868 bytes, Stack size 24 bytes, app_vfd.o(i.Task_VfdComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Task_VfdComm &rArr; PltParaWrite &rArr; ModbusStartSend &rArr; UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWriteRegPacket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWriteMoreRegPacket
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdWaitResp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdSetWhoUse
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdReadRegPacket
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdClrTimeOut
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteOptResult
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComOptResultAlarm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIndexChg
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChgVfdAddr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPltReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>Task_VfdDeal</STRONG> (Thumb, 764 bytes, Stack size 24 bytes, app_vfd.o(i.Task_VfdDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Task_VfdDeal &rArr; ModbusRcvCrcChk &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvTimeOut
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvFinish
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusRcvCrcChk
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModbusMaster
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevMan860DataPrase
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fb]"></a>Task_VfdInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_vfd.o(i.Task_VfdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Task_VfdInit &rArr; Init485Uart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init485Uart
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VfdCtrlInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusOvTmInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusFunInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusAddrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MultFun_1s
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdDebug
</UL>

<P><STRONG><a name="[4d]"></a>UART4_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f10x_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; ModbusSendNextChar &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusUartIsr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSendNextChar
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; ModbusSendNextChar &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusUartIsr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSendNextChar
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartFirstChar
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; GprsUartIsr &rArr; pipeDataWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; ModbusSendNextChar &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusUartIsr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSendNextChar
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4852_ChgToSnd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4851_ChgToSnd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4850_ChgToSnd
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init485Uart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUART_SetDMAReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDMAReceiveDisable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init485Uart
</UL>

<P><STRONG><a name="[142]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUartDMAInit
</UL>

<P><STRONG><a name="[20d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init485Uart
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4852_ChgToSnd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4851_ChgToSnd
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS4850_ChgToSnd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUART_SetDMAReceive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsDMAReceiveDisable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUart
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init485Uart
</UL>

<P><STRONG><a name="[20b]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntSendData
</UL>

<P><STRONG><a name="[2d]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBus_ISR_Rx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessagePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>UartFirstChar</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(i.UartFirstChar))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>UartIntSendData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart.o(i.UartIntSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusStartSend
</UL>

<P><STRONG><a name="[1e0]"></a>UartRcvTimeOut</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_it.o(i.UartRcvTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartRcvTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTimerOver
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ff]"></a>UartSendData</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, uart.o(i.UartSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugWithLen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIntSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSendNextChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartCmd
</UL>

<P><STRONG><a name="[213]"></a>UartTimerOver</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uart.o(i.UartTimerOver))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRcvTimeOut
</UL>

<P><STRONG><a name="[214]"></a>UpdateFileCrcCheck</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, app_upgrade.o(i.UpdateFileCrcCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UpdateFileCrcCheck &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashRead
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32CalcReset
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[217]"></a>UpdateFileGet</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, app_upgrade.o(i.UpdateFileGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UpdateFileGet &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartDMAReceive
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[219]"></a>UpdateFileWrite</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app_upgrade.o(i.UpdateFileWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UpdateFileWrite &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWrite
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGprsUartDMABuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[e1]"></a>UpgradeFlagSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_upgrade.o(i.UpgradeFlagSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpgradeFlagSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
</UL>

<P><STRONG><a name="[21b]"></a>UpgradeSectorErase</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_upgrade.o(i.UpgradeSectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UpgradeSectorErase &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashErase4K
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
</UL>

<P><STRONG><a name="[1cb]"></a>UpgradeServerInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_upgrade.o(i.UpgradeServerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UpgradeServerInit &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1ca]"></a>UpgradeSizeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_upgrade.o(i.UpgradeSizeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UpgradeSizeInit &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[21c]"></a>UpgradeTask</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, app_upgrade.o(i.UpgradeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UpgradeTask &rArr; UpdateFileCrcCheck &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeSectorErase
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileWrite
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileGet
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFileCrcCheck
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAppInfUpdate
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelIsFtping
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FtpDataGetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>UpgradeUsrInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_upgrade.o(i.UpgradeUsrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UpgradeUsrInit &rArr; strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1c9]"></a>UpgradeVersionInit</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, app_upgrade.o(i.UpgradeVersionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = UpgradeVersionInit &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToHex
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>UsrCmdCtrl</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_usrcmd.o(i.UsrCmdCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = UsrCmdCtrl &rArr; DebugFtpTest &rArr; FtpInfoInit &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RebootDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugFtpTest
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
</UL>

<P><STRONG><a name="[220]"></a>UsrCmdDebug</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, app_usrcmd.o(i.UsrCmdDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = UsrCmdDebug &rArr; Task_VfdInit &rArr; Init485Uart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
</UL>

<P><STRONG><a name="[221]"></a>UsrCmdParse</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, app_usrcmd.o(i.UsrCmdParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = UsrCmdParse &rArr; UsrCmdCtrl &rArr; DebugFtpTest &rArr; FtpInfoInit &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdTest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdQuery
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdDebug
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdCtrl
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>UsrCmdQuery</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, app_usrcmd.o(i.UsrCmdQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UsrCmdQuery &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGprsCon
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
</UL>

<P><STRONG><a name="[222]"></a>UsrCmdSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_usrcmd.o(i.UsrCmdSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UsrCmdSet &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
</UL>

<P><STRONG><a name="[224]"></a>UsrCmdTest</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_usrcmd.o(i.UsrCmdTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UsrCmdTest &rArr; my_atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
</UL>

<P><STRONG><a name="[1a3]"></a>VfdClrTimeOut</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_vfd.o(i.VfdClrTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[209]"></a>VfdCtrlInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_vfd.o(i.VfdCtrlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VfdCtrlInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
</UL>

<P><STRONG><a name="[19f]"></a>VfdReadRegPacket</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_vfd.o(i.VfdReadRegPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VfdReadRegPacket &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[1a1]"></a>VfdSetWhoUse</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, app_vfd.o(i.VfdSetWhoUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VfdSetWhoUse
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[1a0]"></a>VfdWaitResp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_vfd.o(i.VfdWaitResp))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[1f4]"></a>VfdWriteMoreRegPacket</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, app_vfd.o(i.VfdWriteMoreRegPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VfdWriteMoreRegPacket &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
</UL>

<P><STRONG><a name="[1a2]"></a>VfdWriteRegPacket</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_vfd.o(i.VfdWriteRegPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VfdWriteRegPacket &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltParaWrite
</UL>

<P><STRONG><a name="[1d2]"></a>Vfd_Meter_Write_Data</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_vfd.o(i.Vfd_Meter_Write_Data))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
</UL>

<P><STRONG><a name="[1af]"></a>WaitRsp</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, app_protocol.o(i.WaitRsp))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
</UL>

<P><STRONG><a name="[e5]"></a>WordToBuf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comm.o(i.WordToBuf))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUpdateData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckPacket
</UL>

<P><STRONG><a name="[1f0]"></a>XYDevDataDeal</STRONG> (Thumb, 454 bytes, Stack size 16 bytes, app_plt.o(i.XYDevDataDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XYDevDataDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterDeal
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
</UL>

<P><STRONG><a name="[1e3]"></a>XYMeterVarRead</STRONG> (Thumb, 484 bytes, Stack size 20 bytes, app_plt.o(i.XYMeterVarRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = XYMeterVarRead
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarRead
</UL>

<P><STRONG><a name="[f6]"></a>YearDay</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, app_rtc.o(i.YearDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = YearDay &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConverseTimeNum
</UL>

<P><STRONG><a name="[ba]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[108]"></a>_flashRead</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_para.o(i._flashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _flashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaRead
</UL>

<P><STRONG><a name="[10c]"></a>_flashWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, app_para.o(i._flashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _flashWrite &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaWrite
</UL>

<P><STRONG><a name="[9f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[22b]"></a>dtuCfgDataCheck</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_dtucfg.o(i.dtuCfgDataCheck))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
</UL>

<P><STRONG><a name="[229]"></a>dtuCfgDataCrc</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, app_dtucfg.o(i.dtuCfgDataCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dtuCfgDataCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuConfigResp
</UL>

<P><STRONG><a name="[228]"></a>dtuConfigResp</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, app_dtucfg.o(i.dtuConfigResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dtuConfigResp &rArr; dtuCfgDataCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuCfgDataCrc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
</UL>

<P><STRONG><a name="[22a]"></a>dtuFactoryConfig</STRONG> (Thumb, 1380 bytes, Stack size 64 bytes, app_dtucfg.o(i.dtuFactoryConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dtuFactoryConfig &rArr; RS485CfgResp &rArr; ModbusStartSend &rArr; UartIntSendData &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485CfgResp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuConfigResp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuCfgDataCrc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuCfgDataCheck
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BigEndConvert
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[201]"></a>gprsIsConnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gc65.o(i.gprsIsConnect))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[1ad]"></a>isGprsCon</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_protocol.o(i.isGprsCon))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysComLed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdQuery
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProDataSend
</UL>

<P><STRONG><a name="[8b]"></a>main</STRONG> (Thumb, 532 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = main &rArr; Task_ProDeal &rArr; GPRSDataDeal &rArr; ServerCmdDeal &rArr; ServerDataGetRespond &rArr; JSON_MeterDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtuFactoryConfig
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeTask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdDeal
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_VfdComm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProDeal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MultFun_1s
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterDeal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Deal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Meter2Comm
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaStorage
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysComLed
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComLed
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485SndDly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485ComInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProSendInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultFunInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAppInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevStatToSystem
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmFilterTimer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmEventInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmEventDeal
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftWareInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a7]"></a>my_atof</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, comm.o(i.my_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = my_atof &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
</UL>

<P><STRONG><a name="[e0]"></a>my_atoi</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, comm.o(i.my_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrListExtract
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdTest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdQuery
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdDebug
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdCtrl
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveBlackatoi
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdParse
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmd_Head_Deal
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[196]"></a>my_itoa</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, comm.o(i.my_itoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltDevDataPrase
</UL>

<P><STRONG><a name="[15b]"></a>pipeCreate</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, pipe.o(i.pipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pipeCreate &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsAppInit
</UL>

<P><STRONG><a name="[161]"></a>pipeDataRead</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pipe.o(i.pipeDataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pipeDataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProDeal
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataAccept
</UL>

<P><STRONG><a name="[164]"></a>pipeDataWrite</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pipe.o(i.pipeDataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pipeDataWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataPost
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartIsr
</UL>

<P><STRONG><a name="[163]"></a>pipeFlush</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pipe.o(i.pipeFlush))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataFlush
</UL>

<P><STRONG><a name="[18f]"></a>rst_data_process</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, app_multfun.o(i.rst_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = rst_data_process &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultFunInit
</UL>

<P><STRONG><a name="[1d1]"></a>stricmp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, comm.o(i.stricmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharConvert
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsrCmdParse
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerParaSet
</UL>

<P><STRONG><a name="[85]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[5a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
</UL>

<P><STRONG><a name="[235]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
</UL>

<P><STRONG><a name="[239]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
</UL>

<P><STRONG><a name="[23a]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
</UL>

<P><STRONG><a name="[27d]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEventInfo
</UL>

<P><STRONG><a name="[27e]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PltSysVarWriter
</UL>

<P><STRONG><a name="[23b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[238]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[237]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
</UL>

<P><STRONG><a name="[23c]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_FlowDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
</UL>

<P><STRONG><a name="[23e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
</UL>

<P><STRONG><a name="[240]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[230]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
</UL>

<P><STRONG><a name="[27f]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrAndDataToObject
</UL>

<P><STRONG><a name="[280]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_MeterDataToObject
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_atof
</UL>

<P><STRONG><a name="[242]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[23f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[241]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[64]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[17a]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
</UL>

<P><STRONG><a name="[16b]"></a>systick_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bsp.o(i.systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = systick_init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWareInit
</UL>

<P><STRONG><a name="[e9]"></a>AlarmFilterTimeOver</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, app_alarmevent.o(i.AlarmFilterTimeOver))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlarmFilterTimer
</UL>

<P><STRONG><a name="[fc]"></a>Debug</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_debug.o(i.Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Debug &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485SndDly
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
</UL>

<P><STRONG><a name="[104]"></a>DebugWithLen</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_debug.o(i.DebugWithLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugWithLen &rArr; UartSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485SndDly
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
</UL>

<P><STRONG><a name="[187]"></a>Led_Indicate</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, app_led.o(i.Led_Indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Led_Indicate
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComLed
</UL>

<P><STRONG><a name="[107]"></a>DevParaRead</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, app_para.o(i.DevParaRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DevParaRead &rArr; CRC16_1
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flashRead
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysParaRead
</UL>

<P><STRONG><a name="[10b]"></a>_flashErase</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_para.o(i._flashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _flashErase &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevParaWrite
</UL>

<P><STRONG><a name="[1b7]"></a>GetComIndex</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_vfd.o(i.GetComIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485ComOptResultAlarm
</UL>

<P><STRONG><a name="[1f7]"></a>MeterReadIndexChg</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, app_vfd.o(i.MeterReadIndexChg))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MeterComm
</UL>

<P><STRONG><a name="[d2]"></a>ATCmdCnntSvr</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, gc65.o(i.ATCmdCnntSvr))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ATCmdCnntSvr &rArr; ATCmdSend &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSend
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
</UL>

<P><STRONG><a name="[d4]"></a>ATCmdSend</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gc65.o(i.ATCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ATCmdSend &rArr; DebugMsg &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMsg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsUartCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskGC65
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdSetAPN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCmdCnntSvr
</UL>

<P><STRONG><a name="[157]"></a>GetStatusUpData</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, app_protocol.o(i.GetStatusUpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = GetStatusUpData &rArr; GetPlt1SpecPara &rArr; JSON_AddrAndDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt3SpecPara
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt2SpecPara
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlt1SpecPara
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ProSend
</UL>

<P><STRONG><a name="[192]"></a>ObjRespondToServer</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, app_protocol.o(i.ObjRespondToServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ObjRespondToServer &rArr; JSON_RtcTimeGet &rArr; JSON_StringValToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectEnd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_ObjectBegin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_NumberValToObject
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugStrMsg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_RtcTimeGet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GprsSndDataPost
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckPacket
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[193]"></a>OnlykeyVarRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_protocol.o(i.OnlykeyVarRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = OnlykeyVarRead &rArr; JSON_AddrNumberDataToObject &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_AddrNumberDataToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerDataGetRespond
</UL>

<P><STRONG><a name="[1c8]"></a>SetBindStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_protocol.o(i.SetBindStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetBindStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterReadIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCmdDeal
</UL>

<P><STRONG><a name="[1d5]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d6]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[124]"></a>FlashModelRead</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, spiflash.o(i.FlashModelRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashModelRead &rArr; FlashReadID &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadID
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPost
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashLockPend
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashInit
</UL>

<P><STRONG><a name="[128]"></a>FlashReadStatusRegister</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashReadStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashReadStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWait_Busy_AAI
</UL>

<P><STRONG><a name="[11c]"></a>FlashWaitForWriteEnd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashWaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashWaitForWriteEnd &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase_4KByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
</UL>

<P><STRONG><a name="[11b]"></a>FlashWait_Busy_AAI</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashWait_Busy_AAI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FlashWait_Busy_AAI &rArr; FlashReadStatusRegister &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
</UL>

<P><STRONG><a name="[11d]"></a>FlashWriteDisable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashWriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashWriteDisable &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase_4KByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
</UL>

<P><STRONG><a name="[11a]"></a>FlashWriteEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spiflashdev.o(i.FlashWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashWriteEnable &rArr; FlashSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSelect
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSPISend
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSectorErase_4KByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashBufferWrite
</UL>

<P><STRONG><a name="[23d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[236]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b3]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[59]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
